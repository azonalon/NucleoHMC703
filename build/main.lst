ARM GAS  /tmp/ccZnAz61.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB135:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** 
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
ARM GAS  /tmp/ccZnAz61.s 			page 2


  32:Src/main.c    **** /* USER CODE END PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** /* USER CODE END PD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  39:Src/main.c    **** /* USER CODE BEGIN PM */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* USER CODE END PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  44:Src/main.c    **** SPI_HandleTypeDef hspi1;
  45:Src/main.c    **** 
  46:Src/main.c    **** TIM_HandleTypeDef htim1;
  47:Src/main.c    **** 
  48:Src/main.c    **** UART_HandleTypeDef huart2;
  49:Src/main.c    **** 
  50:Src/main.c    **** /* USER CODE BEGIN PV */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END PV */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  55:Src/main.c    **** void SystemClock_Config(void);
  56:Src/main.c    **** static void MX_GPIO_Init(void);
  57:Src/main.c    **** static void MX_USART2_UART_Init(void);
  58:Src/main.c    **** static void MX_SPI1_Init(void);
  59:Src/main.c    **** static void MX_TIM1_Init(void);
  60:Src/main.c    **** /* USER CODE BEGIN PFP */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END PFP */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  65:Src/main.c    **** /* USER CODE BEGIN 0 */
  66:Src/main.c    **** 
  67:Src/main.c    **** /* USER CODE END 0 */
  68:Src/main.c    **** 
  69:Src/main.c    **** /**
  70:Src/main.c    ****   * @brief  The application entry point.
  71:Src/main.c    ****   * @retval int
  72:Src/main.c    ****   */
  73:Src/main.c    **** int main(void)
  74:Src/main.c    **** {
  75:Src/main.c    ****   /* USER CODE BEGIN 1 */
  76:Src/main.c    **** 
  77:Src/main.c    ****   /* USER CODE END 1 */
  78:Src/main.c    ****   
  79:Src/main.c    **** 
  80:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  81:Src/main.c    **** 
  82:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  83:Src/main.c    ****   HAL_Init();
  84:Src/main.c    **** 
  85:Src/main.c    ****   /* USER CODE BEGIN Init */
  86:Src/main.c    **** 
  87:Src/main.c    ****   /* USER CODE END Init */
  88:Src/main.c    **** 
ARM GAS  /tmp/ccZnAz61.s 			page 3


  89:Src/main.c    ****   /* Configure the system clock */
  90:Src/main.c    ****   SystemClock_Config();
  91:Src/main.c    **** 
  92:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* USER CODE END SysInit */
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* Initialize all configured peripherals */
  97:Src/main.c    ****   MX_GPIO_Init();
  98:Src/main.c    ****   MX_USART2_UART_Init();
  99:Src/main.c    ****   MX_SPI1_Init();
 100:Src/main.c    ****   MX_TIM1_Init();
 101:Src/main.c    ****   /* USER CODE BEGIN 2 */
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* USER CODE END 2 */
 104:Src/main.c    ****  
 105:Src/main.c    ****  
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* Infinite loop */
 108:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 109:Src/main.c    ****   while (1)
 110:Src/main.c    ****   {
 111:Src/main.c    ****     /* USER CODE END WHILE */
 112:Src/main.c    **** 
 113:Src/main.c    ****     /* USER CODE BEGIN 3 */
 114:Src/main.c    ****   }
 115:Src/main.c    ****   /* USER CODE END 3 */
 116:Src/main.c    **** }
 117:Src/main.c    **** 
 118:Src/main.c    **** /**
 119:Src/main.c    ****   * @brief System Clock Configuration
 120:Src/main.c    ****   * @retval None
 121:Src/main.c    ****   */
 122:Src/main.c    **** void SystemClock_Config(void)
 123:Src/main.c    **** {
 124:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 125:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 126:Src/main.c    **** 
 127:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 128:Src/main.c    ****   */
 129:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 130:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 131:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 132:Src/main.c    ****   */
 133:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 134:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 135:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 136:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 137:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 138:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 139:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 140:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 141:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 142:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = 2;
 143:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 144:Src/main.c    ****   {
 145:Src/main.c    ****     Error_Handler();
ARM GAS  /tmp/ccZnAz61.s 			page 4


 146:Src/main.c    ****   }
 147:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 148:Src/main.c    ****   */
 149:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 150:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 151:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 152:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 153:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 154:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 155:Src/main.c    **** 
 156:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 157:Src/main.c    ****   {
 158:Src/main.c    ****     Error_Handler();
 159:Src/main.c    ****   }
 160:Src/main.c    **** }
 161:Src/main.c    **** 
 162:Src/main.c    **** /**
 163:Src/main.c    ****   * @brief SPI1 Initialization Function
 164:Src/main.c    ****   * @param None
 165:Src/main.c    ****   * @retval None
 166:Src/main.c    ****   */
 167:Src/main.c    **** static void MX_SPI1_Init(void)
 168:Src/main.c    **** {
 169:Src/main.c    **** 
 170:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 171:Src/main.c    **** 
 172:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 173:Src/main.c    **** 
 174:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 175:Src/main.c    **** 
 176:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 177:Src/main.c    ****   /* SPI1 parameter configuration*/
 178:Src/main.c    ****   hspi1.Instance = SPI1;
 179:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 180:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 181:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 182:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 183:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 184:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 185:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 186:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 187:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 188:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 189:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 190:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 191:Src/main.c    ****   {
 192:Src/main.c    ****     Error_Handler();
 193:Src/main.c    ****   }
 194:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 195:Src/main.c    **** 
 196:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 197:Src/main.c    **** 
 198:Src/main.c    **** }
 199:Src/main.c    **** 
 200:Src/main.c    **** /**
 201:Src/main.c    ****   * @brief TIM1 Initialization Function
 202:Src/main.c    ****   * @param None
ARM GAS  /tmp/ccZnAz61.s 			page 5


 203:Src/main.c    ****   * @retval None
 204:Src/main.c    ****   */
 205:Src/main.c    **** static void MX_TIM1_Init(void)
 206:Src/main.c    **** {
 207:Src/main.c    **** 
 208:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 209:Src/main.c    **** 
 210:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 211:Src/main.c    **** 
 212:Src/main.c    ****   TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 213:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 214:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 215:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 216:Src/main.c    **** 
 217:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 218:Src/main.c    **** 
 219:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 220:Src/main.c    ****   htim1.Instance = TIM1;
 221:Src/main.c    ****   htim1.Init.Prescaler = 0;
 222:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 223:Src/main.c    ****   htim1.Init.Period = 0;
 224:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 225:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 226:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 227:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 228:Src/main.c    ****   {
 229:Src/main.c    ****     Error_Handler();
 230:Src/main.c    ****   }
 231:Src/main.c    ****   if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 232:Src/main.c    ****   {
 233:Src/main.c    ****     Error_Handler();
 234:Src/main.c    ****   }
 235:Src/main.c    ****   sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 236:Src/main.c    ****   sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 237:Src/main.c    ****   sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 238:Src/main.c    ****   sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 239:Src/main.c    ****   sSlaveConfig.TriggerFilter = 0;
 240:Src/main.c    ****   if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 241:Src/main.c    ****   {
 242:Src/main.c    ****     Error_Handler();
 243:Src/main.c    ****   }
 244:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 245:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 246:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 247:Src/main.c    ****   {
 248:Src/main.c    ****     Error_Handler();
 249:Src/main.c    ****   }
 250:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 251:Src/main.c    ****   sConfigOC.Pulse = 0;
 252:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 253:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 254:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 255:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 256:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 257:Src/main.c    ****   if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 258:Src/main.c    ****   {
 259:Src/main.c    ****     Error_Handler();
ARM GAS  /tmp/ccZnAz61.s 			page 6


 260:Src/main.c    ****   }
 261:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 262:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 263:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 264:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 265:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 266:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 267:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 268:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 269:Src/main.c    ****   {
 270:Src/main.c    ****     Error_Handler();
 271:Src/main.c    ****   }
 272:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 273:Src/main.c    **** 
 274:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 275:Src/main.c    **** 
 276:Src/main.c    **** }
 277:Src/main.c    **** 
 278:Src/main.c    **** /**
 279:Src/main.c    ****   * @brief USART2 Initialization Function
 280:Src/main.c    ****   * @param None
 281:Src/main.c    ****   * @retval None
 282:Src/main.c    ****   */
 283:Src/main.c    **** static void MX_USART2_UART_Init(void)
 284:Src/main.c    **** {
 285:Src/main.c    **** 
 286:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 287:Src/main.c    **** 
 288:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 289:Src/main.c    **** 
 290:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 291:Src/main.c    **** 
 292:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 293:Src/main.c    ****   huart2.Instance = USART2;
 294:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 295:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 296:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 297:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 298:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 299:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 300:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 301:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 302:Src/main.c    ****   {
 303:Src/main.c    ****     Error_Handler();
 304:Src/main.c    ****   }
 305:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 306:Src/main.c    **** 
 307:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 308:Src/main.c    **** 
 309:Src/main.c    **** }
 310:Src/main.c    **** 
 311:Src/main.c    **** /**
 312:Src/main.c    ****   * @brief GPIO Initialization Function
 313:Src/main.c    ****   * @param None
 314:Src/main.c    ****   * @retval None
 315:Src/main.c    ****   */
 316:Src/main.c    **** static void MX_GPIO_Init(void)
ARM GAS  /tmp/ccZnAz61.s 			page 7


 317:Src/main.c    **** {
  28              		.loc 1 317 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 00B5     		push	{lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 14, -4
  36 0002 8BB0     		sub	sp, sp, #44
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 48
 318:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 318 3 view .LVU1
  40              		.loc 1 318 20 is_stmt 0 view .LVU2
  41 0004 0022     		movs	r2, #0
  42 0006 0792     		str	r2, [sp, #28]
  43 0008 0892     		str	r2, [sp, #32]
  44 000a 0992     		str	r2, [sp, #36]
 319:Src/main.c    **** 
 320:Src/main.c    ****   /* GPIO Ports Clock Enable */
 321:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  45              		.loc 1 321 3 is_stmt 1 view .LVU3
  46              	.LBB2:
  47              		.loc 1 321 3 view .LVU4
  48 000c 0192     		str	r2, [sp, #4]
  49              		.loc 1 321 3 view .LVU5
  50 000e 1A4B     		ldr	r3, .L3
  51 0010 196B     		ldr	r1, [r3, #48]
  52 0012 41F00401 		orr	r1, r1, #4
  53 0016 1963     		str	r1, [r3, #48]
  54              		.loc 1 321 3 view .LVU6
  55 0018 196B     		ldr	r1, [r3, #48]
  56 001a 01F00401 		and	r1, r1, #4
  57 001e 0191     		str	r1, [sp, #4]
  58              		.loc 1 321 3 view .LVU7
  59 0020 0199     		ldr	r1, [sp, #4]
  60              	.LBE2:
  61              		.loc 1 321 3 view .LVU8
 322:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  62              		.loc 1 322 3 view .LVU9
  63              	.LBB3:
  64              		.loc 1 322 3 view .LVU10
  65 0022 0292     		str	r2, [sp, #8]
  66              		.loc 1 322 3 view .LVU11
  67 0024 196B     		ldr	r1, [r3, #48]
  68 0026 41F08001 		orr	r1, r1, #128
  69 002a 1963     		str	r1, [r3, #48]
  70              		.loc 1 322 3 view .LVU12
  71 002c 196B     		ldr	r1, [r3, #48]
  72 002e 01F08001 		and	r1, r1, #128
  73 0032 0291     		str	r1, [sp, #8]
  74              		.loc 1 322 3 view .LVU13
  75 0034 0299     		ldr	r1, [sp, #8]
  76              	.LBE3:
  77              		.loc 1 322 3 view .LVU14
 323:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
ARM GAS  /tmp/ccZnAz61.s 			page 8


  78              		.loc 1 323 3 view .LVU15
  79              	.LBB4:
  80              		.loc 1 323 3 view .LVU16
  81 0036 0392     		str	r2, [sp, #12]
  82              		.loc 1 323 3 view .LVU17
  83 0038 196B     		ldr	r1, [r3, #48]
  84 003a 41F00101 		orr	r1, r1, #1
  85 003e 1963     		str	r1, [r3, #48]
  86              		.loc 1 323 3 view .LVU18
  87 0040 196B     		ldr	r1, [r3, #48]
  88 0042 01F00101 		and	r1, r1, #1
  89 0046 0391     		str	r1, [sp, #12]
  90              		.loc 1 323 3 view .LVU19
  91 0048 0399     		ldr	r1, [sp, #12]
  92              	.LBE4:
  93              		.loc 1 323 3 view .LVU20
 324:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  94              		.loc 1 324 3 view .LVU21
  95              	.LBB5:
  96              		.loc 1 324 3 view .LVU22
  97 004a 0492     		str	r2, [sp, #16]
  98              		.loc 1 324 3 view .LVU23
  99 004c 1A6B     		ldr	r2, [r3, #48]
 100 004e 42F00202 		orr	r2, r2, #2
 101 0052 1A63     		str	r2, [r3, #48]
 102              		.loc 1 324 3 view .LVU24
 103 0054 1B6B     		ldr	r3, [r3, #48]
 104 0056 03F00203 		and	r3, r3, #2
 105 005a 0493     		str	r3, [sp, #16]
 106              		.loc 1 324 3 view .LVU25
 107 005c 049B     		ldr	r3, [sp, #16]
 108              	.LBE5:
 109              		.loc 1 324 3 view .LVU26
 325:Src/main.c    **** 
 326:Src/main.c    ****   /*Configure GPIO pin : B1_Pin */
 327:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin;
 110              		.loc 1 327 3 view .LVU27
 111              		.loc 1 327 23 is_stmt 0 view .LVU28
 112 005e 4FF40053 		mov	r3, #8192
 113 0062 0593     		str	r3, [sp, #20]
 328:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 114              		.loc 1 328 3 is_stmt 1 view .LVU29
 115              		.loc 1 328 24 is_stmt 0 view .LVU30
 116 0064 054B     		ldr	r3, .L3+4
 117 0066 0693     		str	r3, [sp, #24]
 329:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 118              		.loc 1 329 3 is_stmt 1 view .LVU31
 330:Src/main.c    ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 119              		.loc 1 330 3 view .LVU32
 120 0068 05A9     		add	r1, sp, #20
 121 006a 0548     		ldr	r0, .L3+8
 122 006c FFF7FEFF 		bl	HAL_GPIO_Init
 123              	.LVL0:
 331:Src/main.c    **** 
 332:Src/main.c    **** }
 124              		.loc 1 332 1 is_stmt 0 view .LVU33
 125 0070 0BB0     		add	sp, sp, #44
ARM GAS  /tmp/ccZnAz61.s 			page 9


 126              	.LCFI2:
 127              		.cfi_def_cfa_offset 4
 128              		@ sp needed
 129 0072 5DF804FB 		ldr	pc, [sp], #4
 130              	.L4:
 131 0076 00BF     		.align	2
 132              	.L3:
 133 0078 00380240 		.word	1073887232
 134 007c 00002110 		.word	270598144
 135 0080 00080240 		.word	1073874944
 136              		.cfi_endproc
 137              	.LFE135:
 139              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 140              		.align	1
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu fpv4-sp-d16
 146              	MX_USART2_UART_Init:
 147              	.LFB134:
 284:Src/main.c    **** 
 148              		.loc 1 284 1 is_stmt 1 view -0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152 0000 08B5     		push	{r3, lr}
 153              	.LCFI3:
 154              		.cfi_def_cfa_offset 8
 155              		.cfi_offset 3, -8
 156              		.cfi_offset 14, -4
 293:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 157              		.loc 1 293 3 view .LVU35
 293:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 158              		.loc 1 293 19 is_stmt 0 view .LVU36
 159 0002 0848     		ldr	r0, .L7
 160 0004 084B     		ldr	r3, .L7+4
 161 0006 0360     		str	r3, [r0]
 294:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 162              		.loc 1 294 3 is_stmt 1 view .LVU37
 294:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 163              		.loc 1 294 24 is_stmt 0 view .LVU38
 164 0008 4FF4E133 		mov	r3, #115200
 165 000c 4360     		str	r3, [r0, #4]
 295:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 166              		.loc 1 295 3 is_stmt 1 view .LVU39
 295:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 167              		.loc 1 295 26 is_stmt 0 view .LVU40
 168 000e 0023     		movs	r3, #0
 169 0010 8360     		str	r3, [r0, #8]
 296:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 170              		.loc 1 296 3 is_stmt 1 view .LVU41
 296:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 171              		.loc 1 296 24 is_stmt 0 view .LVU42
 172 0012 C360     		str	r3, [r0, #12]
 297:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 173              		.loc 1 297 3 is_stmt 1 view .LVU43
 297:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
ARM GAS  /tmp/ccZnAz61.s 			page 10


 174              		.loc 1 297 22 is_stmt 0 view .LVU44
 175 0014 0361     		str	r3, [r0, #16]
 298:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 176              		.loc 1 298 3 is_stmt 1 view .LVU45
 298:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 177              		.loc 1 298 20 is_stmt 0 view .LVU46
 178 0016 0C22     		movs	r2, #12
 179 0018 4261     		str	r2, [r0, #20]
 299:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 180              		.loc 1 299 3 is_stmt 1 view .LVU47
 299:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 181              		.loc 1 299 25 is_stmt 0 view .LVU48
 182 001a 8361     		str	r3, [r0, #24]
 300:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 183              		.loc 1 300 3 is_stmt 1 view .LVU49
 300:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 184              		.loc 1 300 28 is_stmt 0 view .LVU50
 185 001c C361     		str	r3, [r0, #28]
 301:Src/main.c    ****   {
 186              		.loc 1 301 3 is_stmt 1 view .LVU51
 301:Src/main.c    ****   {
 187              		.loc 1 301 7 is_stmt 0 view .LVU52
 188 001e FFF7FEFF 		bl	HAL_UART_Init
 189              	.LVL1:
 309:Src/main.c    **** 
 190              		.loc 1 309 1 view .LVU53
 191 0022 08BD     		pop	{r3, pc}
 192              	.L8:
 193              		.align	2
 194              	.L7:
 195 0024 00000000 		.word	huart2
 196 0028 00440040 		.word	1073759232
 197              		.cfi_endproc
 198              	.LFE134:
 200              		.section	.text.MX_SPI1_Init,"ax",%progbits
 201              		.align	1
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 205              		.fpu fpv4-sp-d16
 207              	MX_SPI1_Init:
 208              	.LFB132:
 168:Src/main.c    **** 
 209              		.loc 1 168 1 is_stmt 1 view -0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213 0000 08B5     		push	{r3, lr}
 214              	.LCFI4:
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 3, -8
 217              		.cfi_offset 14, -4
 178:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 218              		.loc 1 178 3 view .LVU55
 178:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 219              		.loc 1 178 18 is_stmt 0 view .LVU56
 220 0002 0B48     		ldr	r0, .L11
ARM GAS  /tmp/ccZnAz61.s 			page 11


 221 0004 0B4B     		ldr	r3, .L11+4
 222 0006 0360     		str	r3, [r0]
 179:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 223              		.loc 1 179 3 is_stmt 1 view .LVU57
 179:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 224              		.loc 1 179 19 is_stmt 0 view .LVU58
 225 0008 4FF48273 		mov	r3, #260
 226 000c 4360     		str	r3, [r0, #4]
 180:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 227              		.loc 1 180 3 is_stmt 1 view .LVU59
 180:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 228              		.loc 1 180 24 is_stmt 0 view .LVU60
 229 000e 0023     		movs	r3, #0
 230 0010 8360     		str	r3, [r0, #8]
 181:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 231              		.loc 1 181 3 is_stmt 1 view .LVU61
 181:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 232              		.loc 1 181 23 is_stmt 0 view .LVU62
 233 0012 C360     		str	r3, [r0, #12]
 182:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 234              		.loc 1 182 3 is_stmt 1 view .LVU63
 182:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 235              		.loc 1 182 26 is_stmt 0 view .LVU64
 236 0014 0361     		str	r3, [r0, #16]
 183:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 237              		.loc 1 183 3 is_stmt 1 view .LVU65
 183:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 238              		.loc 1 183 23 is_stmt 0 view .LVU66
 239 0016 4361     		str	r3, [r0, #20]
 184:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 240              		.loc 1 184 3 is_stmt 1 view .LVU67
 184:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 241              		.loc 1 184 18 is_stmt 0 view .LVU68
 242 0018 4FF40072 		mov	r2, #512
 243 001c 8261     		str	r2, [r0, #24]
 185:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 244              		.loc 1 185 3 is_stmt 1 view .LVU69
 185:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 245              		.loc 1 185 32 is_stmt 0 view .LVU70
 246 001e C361     		str	r3, [r0, #28]
 186:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 247              		.loc 1 186 3 is_stmt 1 view .LVU71
 186:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 248              		.loc 1 186 23 is_stmt 0 view .LVU72
 249 0020 0362     		str	r3, [r0, #32]
 187:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 250              		.loc 1 187 3 is_stmt 1 view .LVU73
 187:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 251              		.loc 1 187 21 is_stmt 0 view .LVU74
 252 0022 4362     		str	r3, [r0, #36]
 188:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 253              		.loc 1 188 3 is_stmt 1 view .LVU75
 188:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 254              		.loc 1 188 29 is_stmt 0 view .LVU76
 255 0024 8362     		str	r3, [r0, #40]
 189:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 256              		.loc 1 189 3 is_stmt 1 view .LVU77
ARM GAS  /tmp/ccZnAz61.s 			page 12


 189:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 257              		.loc 1 189 28 is_stmt 0 view .LVU78
 258 0026 0A23     		movs	r3, #10
 259 0028 C362     		str	r3, [r0, #44]
 190:Src/main.c    ****   {
 260              		.loc 1 190 3 is_stmt 1 view .LVU79
 190:Src/main.c    ****   {
 261              		.loc 1 190 7 is_stmt 0 view .LVU80
 262 002a FFF7FEFF 		bl	HAL_SPI_Init
 263              	.LVL2:
 198:Src/main.c    **** 
 264              		.loc 1 198 1 view .LVU81
 265 002e 08BD     		pop	{r3, pc}
 266              	.L12:
 267              		.align	2
 268              	.L11:
 269 0030 00000000 		.word	hspi1
 270 0034 00300140 		.word	1073819648
 271              		.cfi_endproc
 272              	.LFE132:
 274              		.section	.text.MX_TIM1_Init,"ax",%progbits
 275              		.align	1
 276              		.syntax unified
 277              		.thumb
 278              		.thumb_func
 279              		.fpu fpv4-sp-d16
 281              	MX_TIM1_Init:
 282              	.LFB133:
 206:Src/main.c    **** 
 283              		.loc 1 206 1 is_stmt 1 view -0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 88
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287 0000 30B5     		push	{r4, r5, lr}
 288              	.LCFI5:
 289              		.cfi_def_cfa_offset 12
 290              		.cfi_offset 4, -12
 291              		.cfi_offset 5, -8
 292              		.cfi_offset 14, -4
 293 0002 97B0     		sub	sp, sp, #92
 294              	.LCFI6:
 295              		.cfi_def_cfa_offset 104
 212:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 296              		.loc 1 212 3 view .LVU83
 212:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 297              		.loc 1 212 26 is_stmt 0 view .LVU84
 298 0004 0024     		movs	r4, #0
 299 0006 1194     		str	r4, [sp, #68]
 300 0008 1294     		str	r4, [sp, #72]
 301 000a 1394     		str	r4, [sp, #76]
 302 000c 1494     		str	r4, [sp, #80]
 303 000e 1594     		str	r4, [sp, #84]
 213:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 304              		.loc 1 213 3 is_stmt 1 view .LVU85
 213:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 305              		.loc 1 213 27 is_stmt 0 view .LVU86
 306 0010 0F94     		str	r4, [sp, #60]
ARM GAS  /tmp/ccZnAz61.s 			page 13


 307 0012 1094     		str	r4, [sp, #64]
 214:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 308              		.loc 1 214 3 is_stmt 1 view .LVU87
 214:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 309              		.loc 1 214 22 is_stmt 0 view .LVU88
 310 0014 0894     		str	r4, [sp, #32]
 311 0016 0994     		str	r4, [sp, #36]
 312 0018 0A94     		str	r4, [sp, #40]
 313 001a 0B94     		str	r4, [sp, #44]
 314 001c 0C94     		str	r4, [sp, #48]
 315 001e 0D94     		str	r4, [sp, #52]
 316 0020 0E94     		str	r4, [sp, #56]
 215:Src/main.c    **** 
 317              		.loc 1 215 3 is_stmt 1 view .LVU89
 215:Src/main.c    **** 
 318              		.loc 1 215 34 is_stmt 0 view .LVU90
 319 0022 2022     		movs	r2, #32
 320 0024 2146     		mov	r1, r4
 321 0026 6846     		mov	r0, sp
 322 0028 FFF7FEFF 		bl	memset
 323              	.LVL3:
 220:Src/main.c    ****   htim1.Init.Prescaler = 0;
 324              		.loc 1 220 3 is_stmt 1 view .LVU91
 220:Src/main.c    ****   htim1.Init.Prescaler = 0;
 325              		.loc 1 220 18 is_stmt 0 view .LVU92
 326 002c 1D4D     		ldr	r5, .L15
 327 002e 1E4B     		ldr	r3, .L15+4
 328 0030 2B60     		str	r3, [r5]
 221:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 329              		.loc 1 221 3 is_stmt 1 view .LVU93
 221:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 330              		.loc 1 221 24 is_stmt 0 view .LVU94
 331 0032 6C60     		str	r4, [r5, #4]
 222:Src/main.c    ****   htim1.Init.Period = 0;
 332              		.loc 1 222 3 is_stmt 1 view .LVU95
 222:Src/main.c    ****   htim1.Init.Period = 0;
 333              		.loc 1 222 26 is_stmt 0 view .LVU96
 334 0034 AC60     		str	r4, [r5, #8]
 223:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 335              		.loc 1 223 3 is_stmt 1 view .LVU97
 223:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 336              		.loc 1 223 21 is_stmt 0 view .LVU98
 337 0036 EC60     		str	r4, [r5, #12]
 224:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 338              		.loc 1 224 3 is_stmt 1 view .LVU99
 224:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 339              		.loc 1 224 28 is_stmt 0 view .LVU100
 340 0038 2C61     		str	r4, [r5, #16]
 225:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 341              		.loc 1 225 3 is_stmt 1 view .LVU101
 225:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 342              		.loc 1 225 32 is_stmt 0 view .LVU102
 343 003a 6C61     		str	r4, [r5, #20]
 226:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 344              		.loc 1 226 3 is_stmt 1 view .LVU103
 226:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 345              		.loc 1 226 32 is_stmt 0 view .LVU104
ARM GAS  /tmp/ccZnAz61.s 			page 14


 346 003c AC61     		str	r4, [r5, #24]
 227:Src/main.c    ****   {
 347              		.loc 1 227 3 is_stmt 1 view .LVU105
 227:Src/main.c    ****   {
 348              		.loc 1 227 7 is_stmt 0 view .LVU106
 349 003e 2846     		mov	r0, r5
 350 0040 FFF7FEFF 		bl	HAL_TIM_Base_Init
 351              	.LVL4:
 231:Src/main.c    ****   {
 352              		.loc 1 231 3 is_stmt 1 view .LVU107
 231:Src/main.c    ****   {
 353              		.loc 1 231 7 is_stmt 0 view .LVU108
 354 0044 2846     		mov	r0, r5
 355 0046 FFF7FEFF 		bl	HAL_TIM_OC_Init
 356              	.LVL5:
 235:Src/main.c    ****   sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 357              		.loc 1 235 3 is_stmt 1 view .LVU109
 235:Src/main.c    ****   sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 358              		.loc 1 235 26 is_stmt 0 view .LVU110
 359 004a 0723     		movs	r3, #7
 360 004c 1193     		str	r3, [sp, #68]
 236:Src/main.c    ****   sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 361              		.loc 1 236 3 is_stmt 1 view .LVU111
 236:Src/main.c    ****   sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 362              		.loc 1 236 29 is_stmt 0 view .LVU112
 363 004e 7023     		movs	r3, #112
 364 0050 1293     		str	r3, [sp, #72]
 237:Src/main.c    ****   sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 365              		.loc 1 237 3 is_stmt 1 view .LVU113
 237:Src/main.c    ****   sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 366              		.loc 1 237 32 is_stmt 0 view .LVU114
 367 0052 1394     		str	r4, [sp, #76]
 238:Src/main.c    ****   sSlaveConfig.TriggerFilter = 0;
 368              		.loc 1 238 3 is_stmt 1 view .LVU115
 238:Src/main.c    ****   sSlaveConfig.TriggerFilter = 0;
 369              		.loc 1 238 33 is_stmt 0 view .LVU116
 370 0054 1494     		str	r4, [sp, #80]
 239:Src/main.c    ****   if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 371              		.loc 1 239 3 is_stmt 1 view .LVU117
 239:Src/main.c    ****   if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 372              		.loc 1 239 30 is_stmt 0 view .LVU118
 373 0056 1594     		str	r4, [sp, #84]
 240:Src/main.c    ****   {
 374              		.loc 1 240 3 is_stmt 1 view .LVU119
 240:Src/main.c    ****   {
 375              		.loc 1 240 7 is_stmt 0 view .LVU120
 376 0058 11A9     		add	r1, sp, #68
 377 005a 2846     		mov	r0, r5
 378 005c FFF7FEFF 		bl	HAL_TIM_SlaveConfigSynchro
 379              	.LVL6:
 244:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 380              		.loc 1 244 3 is_stmt 1 view .LVU121
 244:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 381              		.loc 1 244 37 is_stmt 0 view .LVU122
 382 0060 0F94     		str	r4, [sp, #60]
 245:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 383              		.loc 1 245 3 is_stmt 1 view .LVU123
ARM GAS  /tmp/ccZnAz61.s 			page 15


 245:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 384              		.loc 1 245 33 is_stmt 0 view .LVU124
 385 0062 1094     		str	r4, [sp, #64]
 246:Src/main.c    ****   {
 386              		.loc 1 246 3 is_stmt 1 view .LVU125
 246:Src/main.c    ****   {
 387              		.loc 1 246 7 is_stmt 0 view .LVU126
 388 0064 0FA9     		add	r1, sp, #60
 389 0066 2846     		mov	r0, r5
 390 0068 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 391              	.LVL7:
 250:Src/main.c    ****   sConfigOC.Pulse = 0;
 392              		.loc 1 250 3 is_stmt 1 view .LVU127
 250:Src/main.c    ****   sConfigOC.Pulse = 0;
 393              		.loc 1 250 20 is_stmt 0 view .LVU128
 394 006c 0894     		str	r4, [sp, #32]
 251:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 395              		.loc 1 251 3 is_stmt 1 view .LVU129
 251:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 396              		.loc 1 251 19 is_stmt 0 view .LVU130
 397 006e 0994     		str	r4, [sp, #36]
 252:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 398              		.loc 1 252 3 is_stmt 1 view .LVU131
 252:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 399              		.loc 1 252 24 is_stmt 0 view .LVU132
 400 0070 0A94     		str	r4, [sp, #40]
 253:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 401              		.loc 1 253 3 is_stmt 1 view .LVU133
 253:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 402              		.loc 1 253 25 is_stmt 0 view .LVU134
 403 0072 0B94     		str	r4, [sp, #44]
 254:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 404              		.loc 1 254 3 is_stmt 1 view .LVU135
 254:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 405              		.loc 1 254 24 is_stmt 0 view .LVU136
 406 0074 0C94     		str	r4, [sp, #48]
 255:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 407              		.loc 1 255 3 is_stmt 1 view .LVU137
 255:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 408              		.loc 1 255 25 is_stmt 0 view .LVU138
 409 0076 0D94     		str	r4, [sp, #52]
 256:Src/main.c    ****   if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 410              		.loc 1 256 3 is_stmt 1 view .LVU139
 256:Src/main.c    ****   if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 411              		.loc 1 256 26 is_stmt 0 view .LVU140
 412 0078 0E94     		str	r4, [sp, #56]
 257:Src/main.c    ****   {
 413              		.loc 1 257 3 is_stmt 1 view .LVU141
 257:Src/main.c    ****   {
 414              		.loc 1 257 7 is_stmt 0 view .LVU142
 415 007a 2246     		mov	r2, r4
 416 007c 08A9     		add	r1, sp, #32
 417 007e 2846     		mov	r0, r5
 418 0080 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 419              	.LVL8:
 261:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 420              		.loc 1 261 3 is_stmt 1 view .LVU143
ARM GAS  /tmp/ccZnAz61.s 			page 16


 261:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 421              		.loc 1 261 40 is_stmt 0 view .LVU144
 422 0084 0094     		str	r4, [sp]
 262:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 423              		.loc 1 262 3 is_stmt 1 view .LVU145
 262:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 424              		.loc 1 262 41 is_stmt 0 view .LVU146
 425 0086 0194     		str	r4, [sp, #4]
 263:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 426              		.loc 1 263 3 is_stmt 1 view .LVU147
 263:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 427              		.loc 1 263 34 is_stmt 0 view .LVU148
 428 0088 0294     		str	r4, [sp, #8]
 264:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 429              		.loc 1 264 3 is_stmt 1 view .LVU149
 264:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 430              		.loc 1 264 33 is_stmt 0 view .LVU150
 431 008a 0394     		str	r4, [sp, #12]
 265:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 432              		.loc 1 265 3 is_stmt 1 view .LVU151
 265:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 433              		.loc 1 265 35 is_stmt 0 view .LVU152
 434 008c 0494     		str	r4, [sp, #16]
 266:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 435              		.loc 1 266 3 is_stmt 1 view .LVU153
 266:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 436              		.loc 1 266 38 is_stmt 0 view .LVU154
 437 008e 4FF40053 		mov	r3, #8192
 438 0092 0593     		str	r3, [sp, #20]
 267:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 439              		.loc 1 267 3 is_stmt 1 view .LVU155
 267:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 440              		.loc 1 267 40 is_stmt 0 view .LVU156
 441 0094 0794     		str	r4, [sp, #28]
 268:Src/main.c    ****   {
 442              		.loc 1 268 3 is_stmt 1 view .LVU157
 268:Src/main.c    ****   {
 443              		.loc 1 268 7 is_stmt 0 view .LVU158
 444 0096 6946     		mov	r1, sp
 445 0098 2846     		mov	r0, r5
 446 009a FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 447              	.LVL9:
 276:Src/main.c    **** 
 448              		.loc 1 276 1 view .LVU159
 449 009e 17B0     		add	sp, sp, #92
 450              	.LCFI7:
 451              		.cfi_def_cfa_offset 12
 452              		@ sp needed
 453 00a0 30BD     		pop	{r4, r5, pc}
 454              	.L16:
 455 00a2 00BF     		.align	2
 456              	.L15:
 457 00a4 00000000 		.word	htim1
 458 00a8 00000140 		.word	1073807360
 459              		.cfi_endproc
 460              	.LFE133:
 462              		.section	.text.SystemClock_Config,"ax",%progbits
ARM GAS  /tmp/ccZnAz61.s 			page 17


 463              		.align	1
 464              		.global	SystemClock_Config
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu fpv4-sp-d16
 470              	SystemClock_Config:
 471              	.LFB131:
 123:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 472              		.loc 1 123 1 is_stmt 1 view -0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 80
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476 0000 30B5     		push	{r4, r5, lr}
 477              	.LCFI8:
 478              		.cfi_def_cfa_offset 12
 479              		.cfi_offset 4, -12
 480              		.cfi_offset 5, -8
 481              		.cfi_offset 14, -4
 482 0002 95B0     		sub	sp, sp, #84
 483              	.LCFI9:
 484              		.cfi_def_cfa_offset 96
 124:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 485              		.loc 1 124 3 view .LVU161
 124:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 486              		.loc 1 124 22 is_stmt 0 view .LVU162
 487 0004 3422     		movs	r2, #52
 488 0006 0021     		movs	r1, #0
 489 0008 07A8     		add	r0, sp, #28
 490 000a FFF7FEFF 		bl	memset
 491              	.LVL10:
 125:Src/main.c    **** 
 492              		.loc 1 125 3 is_stmt 1 view .LVU163
 125:Src/main.c    **** 
 493              		.loc 1 125 22 is_stmt 0 view .LVU164
 494 000e 0024     		movs	r4, #0
 495 0010 0294     		str	r4, [sp, #8]
 496 0012 0394     		str	r4, [sp, #12]
 497 0014 0494     		str	r4, [sp, #16]
 498 0016 0594     		str	r4, [sp, #20]
 499 0018 0694     		str	r4, [sp, #24]
 129:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 500              		.loc 1 129 3 is_stmt 1 view .LVU165
 501              	.LBB6:
 129:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 502              		.loc 1 129 3 view .LVU166
 503 001a 0094     		str	r4, [sp]
 129:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 504              		.loc 1 129 3 view .LVU167
 505 001c 1B4B     		ldr	r3, .L19
 506 001e 1A6C     		ldr	r2, [r3, #64]
 507 0020 42F08052 		orr	r2, r2, #268435456
 508 0024 1A64     		str	r2, [r3, #64]
 129:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 509              		.loc 1 129 3 view .LVU168
 510 0026 1B6C     		ldr	r3, [r3, #64]
 511 0028 03F08053 		and	r3, r3, #268435456
ARM GAS  /tmp/ccZnAz61.s 			page 18


 512 002c 0093     		str	r3, [sp]
 129:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 513              		.loc 1 129 3 view .LVU169
 514 002e 009B     		ldr	r3, [sp]
 515              	.LBE6:
 129:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 516              		.loc 1 129 3 view .LVU170
 130:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 517              		.loc 1 130 3 view .LVU171
 518              	.LBB7:
 130:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 519              		.loc 1 130 3 view .LVU172
 520 0030 0194     		str	r4, [sp, #4]
 130:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 521              		.loc 1 130 3 view .LVU173
 522 0032 174A     		ldr	r2, .L19+4
 523 0034 1368     		ldr	r3, [r2]
 524 0036 23F44043 		bic	r3, r3, #49152
 525 003a 43F48043 		orr	r3, r3, #16384
 526 003e 1360     		str	r3, [r2]
 130:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 527              		.loc 1 130 3 view .LVU174
 528 0040 1368     		ldr	r3, [r2]
 529 0042 03F44043 		and	r3, r3, #49152
 530 0046 0193     		str	r3, [sp, #4]
 130:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 531              		.loc 1 130 3 view .LVU175
 532 0048 019B     		ldr	r3, [sp, #4]
 533              	.LBE7:
 130:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 534              		.loc 1 130 3 view .LVU176
 133:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 535              		.loc 1 133 3 view .LVU177
 133:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 536              		.loc 1 133 36 is_stmt 0 view .LVU178
 537 004a 0225     		movs	r5, #2
 538 004c 0795     		str	r5, [sp, #28]
 134:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 539              		.loc 1 134 3 is_stmt 1 view .LVU179
 134:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 540              		.loc 1 134 30 is_stmt 0 view .LVU180
 541 004e 0123     		movs	r3, #1
 542 0050 0A93     		str	r3, [sp, #40]
 135:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 543              		.loc 1 135 3 is_stmt 1 view .LVU181
 135:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 544              		.loc 1 135 41 is_stmt 0 view .LVU182
 545 0052 1023     		movs	r3, #16
 546 0054 0B93     		str	r3, [sp, #44]
 136:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 547              		.loc 1 136 3 is_stmt 1 view .LVU183
 136:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 548              		.loc 1 136 34 is_stmt 0 view .LVU184
 549 0056 0D95     		str	r5, [sp, #52]
 137:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 550              		.loc 1 137 3 is_stmt 1 view .LVU185
 137:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
ARM GAS  /tmp/ccZnAz61.s 			page 19


 551              		.loc 1 137 35 is_stmt 0 view .LVU186
 552 0058 0E94     		str	r4, [sp, #56]
 138:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 553              		.loc 1 138 3 is_stmt 1 view .LVU187
 138:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 554              		.loc 1 138 30 is_stmt 0 view .LVU188
 555 005a 0F93     		str	r3, [sp, #60]
 139:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 556              		.loc 1 139 3 is_stmt 1 view .LVU189
 139:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 557              		.loc 1 139 30 is_stmt 0 view .LVU190
 558 005c 4FF4A873 		mov	r3, #336
 559 0060 1093     		str	r3, [sp, #64]
 140:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 560              		.loc 1 140 3 is_stmt 1 view .LVU191
 140:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 561              		.loc 1 140 30 is_stmt 0 view .LVU192
 562 0062 0423     		movs	r3, #4
 563 0064 1193     		str	r3, [sp, #68]
 141:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = 2;
 564              		.loc 1 141 3 is_stmt 1 view .LVU193
 141:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = 2;
 565              		.loc 1 141 30 is_stmt 0 view .LVU194
 566 0066 1295     		str	r5, [sp, #72]
 142:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 567              		.loc 1 142 3 is_stmt 1 view .LVU195
 142:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 568              		.loc 1 142 30 is_stmt 0 view .LVU196
 569 0068 1395     		str	r5, [sp, #76]
 143:Src/main.c    ****   {
 570              		.loc 1 143 3 is_stmt 1 view .LVU197
 143:Src/main.c    ****   {
 571              		.loc 1 143 7 is_stmt 0 view .LVU198
 572 006a 07A8     		add	r0, sp, #28
 573 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 574              	.LVL11:
 149:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 575              		.loc 1 149 3 is_stmt 1 view .LVU199
 149:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 576              		.loc 1 149 31 is_stmt 0 view .LVU200
 577 0070 0F23     		movs	r3, #15
 578 0072 0293     		str	r3, [sp, #8]
 151:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 579              		.loc 1 151 3 is_stmt 1 view .LVU201
 151:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 580              		.loc 1 151 34 is_stmt 0 view .LVU202
 581 0074 0395     		str	r5, [sp, #12]
 152:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 582              		.loc 1 152 3 is_stmt 1 view .LVU203
 152:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 583              		.loc 1 152 35 is_stmt 0 view .LVU204
 584 0076 0494     		str	r4, [sp, #16]
 153:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 585              		.loc 1 153 3 is_stmt 1 view .LVU205
 153:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 586              		.loc 1 153 36 is_stmt 0 view .LVU206
 587 0078 4FF48053 		mov	r3, #4096
ARM GAS  /tmp/ccZnAz61.s 			page 20


 588 007c 0593     		str	r3, [sp, #20]
 154:Src/main.c    **** 
 589              		.loc 1 154 3 is_stmt 1 view .LVU207
 154:Src/main.c    **** 
 590              		.loc 1 154 36 is_stmt 0 view .LVU208
 591 007e 0694     		str	r4, [sp, #24]
 156:Src/main.c    ****   {
 592              		.loc 1 156 3 is_stmt 1 view .LVU209
 156:Src/main.c    ****   {
 593              		.loc 1 156 7 is_stmt 0 view .LVU210
 594 0080 2946     		mov	r1, r5
 595 0082 02A8     		add	r0, sp, #8
 596 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 597              	.LVL12:
 160:Src/main.c    **** 
 598              		.loc 1 160 1 view .LVU211
 599 0088 15B0     		add	sp, sp, #84
 600              	.LCFI10:
 601              		.cfi_def_cfa_offset 12
 602              		@ sp needed
 603 008a 30BD     		pop	{r4, r5, pc}
 604              	.L20:
 605              		.align	2
 606              	.L19:
 607 008c 00380240 		.word	1073887232
 608 0090 00700040 		.word	1073770496
 609              		.cfi_endproc
 610              	.LFE131:
 612              		.section	.text.main,"ax",%progbits
 613              		.align	1
 614              		.global	main
 615              		.syntax unified
 616              		.thumb
 617              		.thumb_func
 618              		.fpu fpv4-sp-d16
 620              	main:
 621              	.LFB130:
  74:Src/main.c    ****   /* USER CODE BEGIN 1 */
 622              		.loc 1 74 1 is_stmt 1 view -0
 623              		.cfi_startproc
 624              		@ Volatile: function does not return.
 625              		@ args = 0, pretend = 0, frame = 0
 626              		@ frame_needed = 0, uses_anonymous_args = 0
 627 0000 08B5     		push	{r3, lr}
 628              	.LCFI11:
 629              		.cfi_def_cfa_offset 8
 630              		.cfi_offset 3, -8
 631              		.cfi_offset 14, -4
  83:Src/main.c    **** 
 632              		.loc 1 83 3 view .LVU213
 633 0002 FFF7FEFF 		bl	HAL_Init
 634              	.LVL13:
  90:Src/main.c    **** 
 635              		.loc 1 90 3 view .LVU214
 636 0006 FFF7FEFF 		bl	SystemClock_Config
 637              	.LVL14:
  97:Src/main.c    ****   MX_USART2_UART_Init();
ARM GAS  /tmp/ccZnAz61.s 			page 21


 638              		.loc 1 97 3 view .LVU215
 639 000a FFF7FEFF 		bl	MX_GPIO_Init
 640              	.LVL15:
  98:Src/main.c    ****   MX_SPI1_Init();
 641              		.loc 1 98 3 view .LVU216
 642 000e FFF7FEFF 		bl	MX_USART2_UART_Init
 643              	.LVL16:
  99:Src/main.c    ****   MX_TIM1_Init();
 644              		.loc 1 99 3 view .LVU217
 645 0012 FFF7FEFF 		bl	MX_SPI1_Init
 646              	.LVL17:
 100:Src/main.c    ****   /* USER CODE BEGIN 2 */
 647              		.loc 1 100 3 view .LVU218
 648 0016 FFF7FEFF 		bl	MX_TIM1_Init
 649              	.LVL18:
 650              	.L22:
 109:Src/main.c    ****   {
 651              		.loc 1 109 3 discriminator 1 view .LVU219
 114:Src/main.c    ****   /* USER CODE END 3 */
 652              		.loc 1 114 3 discriminator 1 view .LVU220
 109:Src/main.c    ****   {
 653              		.loc 1 109 9 discriminator 1 view .LVU221
 654 001a FEE7     		b	.L22
 655              		.cfi_endproc
 656              	.LFE130:
 658              		.section	.text.Error_Handler,"ax",%progbits
 659              		.align	1
 660              		.global	Error_Handler
 661              		.syntax unified
 662              		.thumb
 663              		.thumb_func
 664              		.fpu fpv4-sp-d16
 666              	Error_Handler:
 667              	.LFB136:
 333:Src/main.c    **** 
 334:Src/main.c    **** /* USER CODE BEGIN 4 */
 335:Src/main.c    **** 
 336:Src/main.c    **** /* USER CODE END 4 */
 337:Src/main.c    **** 
 338:Src/main.c    **** /**
 339:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 340:Src/main.c    ****   * @retval None
 341:Src/main.c    ****   */
 342:Src/main.c    **** void Error_Handler(void)
 343:Src/main.c    **** {
 668              		.loc 1 343 1 view -0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 0
 671              		@ frame_needed = 0, uses_anonymous_args = 0
 672              		@ link register save eliminated.
 344:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 345:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 346:Src/main.c    **** 
 347:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 348:Src/main.c    **** }
 673              		.loc 1 348 1 view .LVU223
 674 0000 7047     		bx	lr
ARM GAS  /tmp/ccZnAz61.s 			page 22


 675              		.cfi_endproc
 676              	.LFE136:
 678              		.comm	huart2,64,4
 679              		.comm	htim1,64,4
 680              		.comm	hspi1,88,4
 681              		.text
 682              	.Letext0:
 683              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 684              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 685              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 686              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 687              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 688              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 689              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 690              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 691              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 692              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 693              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 694              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 695              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 696              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 697              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 698              		.file 17 "<built-in>"
ARM GAS  /tmp/ccZnAz61.s 			page 23


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccZnAz61.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccZnAz61.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccZnAz61.s:133    .text.MX_GPIO_Init:0000000000000078 $d
     /tmp/ccZnAz61.s:140    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccZnAz61.s:146    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccZnAz61.s:195    .text.MX_USART2_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart2
     /tmp/ccZnAz61.s:201    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccZnAz61.s:207    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccZnAz61.s:269    .text.MX_SPI1_Init:0000000000000030 $d
                            *COM*:0000000000000058 hspi1
     /tmp/ccZnAz61.s:275    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccZnAz61.s:281    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccZnAz61.s:457    .text.MX_TIM1_Init:00000000000000a4 $d
                            *COM*:0000000000000040 htim1
     /tmp/ccZnAz61.s:463    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccZnAz61.s:470    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccZnAz61.s:607    .text.SystemClock_Config:000000000000008c $d
     /tmp/ccZnAz61.s:613    .text.main:0000000000000000 $t
     /tmp/ccZnAz61.s:620    .text.main:0000000000000000 main
     /tmp/ccZnAz61.s:659    .text.Error_Handler:0000000000000000 $t
     /tmp/ccZnAz61.s:666    .text.Error_Handler:0000000000000000 Error_Handler

UNDEFINED SYMBOLS
HAL_GPIO_Init
HAL_UART_Init
HAL_SPI_Init
memset
HAL_TIM_Base_Init
HAL_TIM_OC_Init
HAL_TIM_SlaveConfigSynchro
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_OC_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
